{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["import { Request, Response, NextFunction } from 'express'\nimport fetch from 'node-fetch'\nimport FormData from 'form-data'\n\nexport type ImgbbResponse = {\n  results: Array<{\n    data?: {\n      id: string\n      title: string\n      url_viewer: string\n      url: string\n      display_url: string\n      size: string\n      time: string\n      expiration: string\n      image: {\n        filename: string\n        name: string\n        mime: string\n        extension: string\n        url: string\n      }\n      thumb: {\n        filename: string\n        name: string\n        mime: string\n        extension: string\n        url: string\n      }\n      medium: {\n        filename: string\n        name: string\n        mime: string\n        extension: string\n        url: string\n      }\n      delete_url: string\n    }\n    error?: {\n      message: string\n      code: number\n      context: string\n    }\n    success: boolean\n    status: number\n  }>\n  errors: string[] // Caution, it's not imgbb errors, it's network errors.\n}\n\nexport type ImgbbRequest = Array<{\n  image: string | File\n  name?: string\n  expiration?: number\n}>\n\nexport function imgbb(req: Request, res: Response, next: NextFunction) {\n  const request = req.body.imgbbRequest as ImgbbRequest\n  let count = 0\n  const maxCount = request.length\n  const response = { results: [], errors: [] } as ImgbbResponse\n  const IMGBB_API_KEY = req.app.get('IMGBB_API_KEY')\n\n  if (request && request.length > 0) {\n    request.forEach(({ image, name, expiration }) => {\n      let url = `https://api.imgbb.com/1/upload?key=${IMGBB_API_KEY}`\n      const formData = new FormData()\n\n      if (expiration) {\n        url += `&expiration=${expiration}`\n      }\n\n      if (name) {\n        formData.append('name', name)\n      }\n\n      formData.append('image', image)\n\n      fetch(url, {\n        method: 'POST',\n        body: formData,\n      })\n        .then(async v => {\n          const result = await v.json()\n          count++\n          response.results.push(result as any)\n        })\n        .catch(e => {\n          count++\n          response.errors.push(e)\n        })\n        .finally(() => {\n          if (count === maxCount) {\n            req['imgbb'] = response\n            next()\n          }\n        })\n    })\n  } else {\n    next()\n  }\n}\n"]}