{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["import { config } from 'dotenv';\nimport { Request, Response, NextFunction } from 'express';\nimport fetch from 'node-fetch';\nimport { stringify } from 'querystring';\n\nconfig();\n\nconst { API_KEY } = process.env;\n\nif (API_KEY === undefined) {\n    console.error('\\n[Error] API_KEY is undefined!\\n');\n    process.exit();\n}\n\nlet API_URL = `https://api.imgbb.com/1/upload?key=${API_KEY}`;\n\nexport type ImgbbSuccess = {\n    data: {\n        id: string,\n        title: string,\n        url_viewer: string,\n        url: string,\n        display_url: string,\n        size: string,\n        time: string,\n        expiration: string,\n        image: {\n            filename: string,\n            name: string,\n            mime: string,\n            extension: string,\n            url: string,\n        },\n        thumb: {\n            filename: string,\n            name: string,\n            mime: string,\n            extension: string,\n            url: string,\n        },\n        medium: {\n            filename: string,\n            name: string,\n            mime: string,\n            extension: string,\n            url: string,\n        },\n        delete_url: string\n    },\n    success: boolean,\n    status: number\n};\n\nexport type ImgbbFailure = {\n    status_code: number,\n    error: {\n        message: string,\n        code: number,\n        context: string\n    },\n    status_txt: 'Bad Request'\n};\n\nexport type ImgbbRequest = Array<{\n    image: string,\n    name: string,\n    expiration: string,\n}>;\n\nexport type ImgbbResponse = Array<ImgbbSuccess | ImgbbFailure>;\n\nexport async function imgbb(req: Request, res: Response, next: NextFunction) {\n    const body = req.body;\n    const iRequest: ImgbbRequest = body.iRequest;\n    const iResponse: ImgbbResponse = [];\n    for (const img of iRequest) {\n        if (img.name) {\n            API_URL += `&name=${img.name}`;\n        }\n        if (img.expiration) {\n            API_URL += `&expiration=${img.expiration}`;\n        }\n        const response = await fetch(API_URL, {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: stringify({\n                image: img.image,\n            }),\n        });\n        const json: ImgbbSuccess | ImgbbFailure = await response.json();\n        iResponse.push(json);\n    }\n    req['iResponse'] = iResponse;\n    next();\n}"]}