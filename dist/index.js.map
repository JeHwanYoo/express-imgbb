{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport fetch from 'node-fetch';\nimport { stringify } from 'querystring';\n\nexport type ImgbbResponse = {\n    data: {\n        id: string,\n        title: string,\n        url_viewer: string,\n        url: string,\n        display_url: string,\n        size: string,\n        time: string,\n        expiration: string,\n        image: {\n            filename: string,\n            name: string,\n            mime: string,\n            extension: string,\n            url: string,\n        },\n        thumb: {\n            filename: string,\n            name: string,\n            mime: string,\n            extension: string,\n            url: string,\n        },\n        medium: {\n            filename: string,\n            name: string,\n            mime: string,\n            extension: string,\n            url: string,\n        },\n        delete_url: string\n    } | null,\n    success: boolean,\n    status: number\n    error: {\n        message: string,\n        code: number,\n        context: string,\n    } | null\n};\n\nexport type ImgbbRequest = {\n    image: string,\n    name?: string,\n    expiration?: string,\n}\n\nexport type ImgbbRequestArray = Array<ImgbbRequest>;\nexport type ImgbbResponseArray = Array<ImgbbResponse>;\n\nexport async function imgbb(req: Request, res: Response, next: NextFunction) {\n    const body = req.body;\n    const iRequests: ImgbbRequestArray = body.iRequests;\n    const iResponses: ImgbbResponseArray = [];\n    const API_KEY = req.app.get('IMGBB_API_KEY');\n    let API_URL = `https://api.imgbb.com/1/upload?key=${API_KEY}`;\n\n    for (const img of iRequests) {\n        if (img.name) {\n            API_URL += `&name=${img.name}`;\n        }\n        if (img.expiration) {\n            API_URL += `&expiration=${img.expiration}`;\n        }\n        const response = await fetch(API_URL, {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: stringify({\n                image: img.image,\n            }),\n        });\n        const json = await response.json();\n        let format: ImgbbResponse;\n        if (json.error) {\n            format = {\n                data: null,\n                success: false,\n                status: json.status_code,\n                error: json.error,\n            };\n        } else {\n            format = {\n                data: json.data,\n                success: true,\n                status: 200,\n                error: null,\n            };\n        }\n        iResponses.push(format);\n    }\n    req['iResponses'] = iResponses;\n    next();\n}"]}